version: 2

directory: &default-working-directory
  working_directory: ~/repo

image: &default-node-image
  image: circleci/node:12.16-stretch

env: &default-env
  <<: *default-working-directory
  docker:
    - <<: *default-node-image

jobs:
  build:
    <<: *default-env

    steps:
      - checkout
      - restore_cache:
          keys:
            - v2-npm-{{ checksum "package-lock.json" }}-{{ checksum "backend/package-lock.json" }}
            - v2-npm-
      - run:
          name: Install dependencies
          command: npm run beforebuild
      - save_cache:
          paths:
            - ~/.npm
          key: v2-npm-{{ checksum "package-lock.json" }}-{{ checksum "backend/package-lock.json" }}
      - run:
          name: Build application
          command: npm run build
      - persist_to_workspace:
          root: ~/
          paths:
            - repo

  build-rpm:
    docker:
      - image: rpmbuild/centos7

    working_directory: ~/rpm

    steps:
      - checkout
      - run:
          name: Get current version numbers from cloudify-manager
          command: |
            # Try to download the file from a branch named the same as current branch, otherwise master
            CLOUDIFY_MANAGER_URL=https://raw.githubusercontent.com/cloudify-cosmo/cloudify-manager
            curl -fO "${CLOUDIFY_MANAGER_URL}/${CIRCLE_BRANCH}/packaging/version_info" || \
              curl -fO "${CLOUDIFY_MANAGER_URL}/master/packaging/version_info"
            tee -a $BASH_ENV <version_info
      - run:
          name: Install NodeJS & RPM development tools
          command: |
            sudo yum install -y \
              http://repository.cloudifysource.org/cloudify/components/nodejs-12.16.1-1nodesource.x86_64.rpm \
              rpmdevtools rpmlint
      - run:
          name: Lint RPM spec file
          command: rpmlint --info packaging/cloudify-stage.spec
      - run:
          name: Install build dependencies for RPM spec file
          command: sudo yum-builddep -y packaging/cloudify-stage.spec
      - run:
          name: Download sources for RPM spec file
          command: |
            spectool \
              -d "CLOUDIFY_VERSION ${CLOUDIFY_VERSION}" \
              -d "CLOUDIFY_PACKAGE_RELEASE ${CLOUDIFY_PACKAGE_RELEASE}" \
              -P packaging/cloudify-stage.spec \
              -S -g
      - run:
          name: Build RPM
          command: |
            sudo chmod a+wx /opt
            rpmbuild \
              -D "CLOUDIFY_VERSION ${CLOUDIFY_VERSION}" \
              -D "CLOUDIFY_PACKAGE_RELEASE ${CLOUDIFY_PACKAGE_RELEASE}" \
              -bb packaging/cloudify-stage.spec
      - store_artifacts:
          path: x86_64
          destination: rpm

  test:
    <<: *default-working-directory

    docker:
      - <<: *default-node-image
      - image: circleci/postgres:9.6.9
        environment:
          POSTGRES_USER: cloudify
          POSTGRES_PASSWORD: cloudify
          POSTGRES_DB: stage

    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Initialize database
          command: |
            cd backend
            npm run db-migrate
      - run:
          name: Start Stage Backend
          environment:
            STAGE_BACKEND_INSTANCES: 0
          command: |
            cd backend
            sudo npm run start
      - run:
          name: Run tests
          command: npm run prodtest
      - run:
          name: Check code style
          command: npm run lint

  checkBundleSize:
    <<: *default-env

    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Check bundle size
          command: npm run size

  checkDocs:
    <<: *default-env

    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Generate widgets documentation
          command: npm run docWidgets
      - run:
          name: Check if widgets documentation is up to date
          command: git diff --exit-code ./widgets
      - run:
          name: Check if cloudify-ui-components version is the same as in official documentation
          command: npm run docCheck

  audit:
    <<: *default-env

    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Run npm production dependencies security audit
          command: npm run audit

workflows:
  version: 2
  build-test-check:
    jobs:
      - build
      - build-rpm
      - test:
          requires:
            - build
      - checkBundleSize:
          requires:
            - build
      - checkDocs:
          requires:
            - build
      - audit:
          requires:
            - build
          filters:
            branches:
              only: master