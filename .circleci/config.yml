version: 2


common:
  - &docker_node
      working_directory: &workdir ~/project
      docker:
        - image: circleci/node:8.9


jobs:
  beforebuild:
    <<: *docker_node

    steps:
      - checkout
      - run: npm run beforebuild
      - persist_to_workspace:
          root: *workdir
          paths: *

  test:
    <<: *docker_node

    steps:
      - attach_workspace:
          at: *workdir
      - run: npm run beforebuild
      - run: npm test

  build:
    <<: *docker_node

    steps:
      - attach_workspace:
          at: *workdir
      - run: npm run beforebuild
      - run: npm run build
      - persist_to_workspace:
          root: .
          paths: node_modules

  deploy:
    <<: *docker_node

    steps:
      - attach_workspace:
          at: *workdir
      - run: npm run beforebuild
      - run: npm run zip
      - run: scp stage.tar.gz ec2-user@ec2-54-91-113-74.compute-1.amazonaws.com:~
      - run: cat scripts/ec2-extract.sh | ssh ec2-user@ec2-54-91-113-74.compute-1.amazonaws.com

  build_rpm:
    machine: true

    steps:
      - checkout
      - run: git clone --depth 1 https://github.com/cloudify-cosmo/cloudify-manager.git ~/cloudify-manager
      - run: |
          cd ~/cloudify-manager
          git fetch --depth 1 origin "${CIRCLE_BRANCH}" && git checkout "${CIRCLE_BRANCH}" || echo no matching branch found, using master
      - run: |
          builder="docker run --cap-add SYS_ADMIN --security-opt apparmor:unconfined \
            --mount type=bind,source=$(pwd),target=/source \
            --mount type=bind,source=${HOME}/cloudify-manager,target=/builder \
            cloudify3/mock-builder:0.1 \
            python /builder/packaging/build_rpm.py"
          $builder /source/packaging/cloudify-stage.spec
      - run: mkdir result
      - run: mv ~/cloudify-manager/packaging/*.rpm result

      - store_artifacts:
          path: result
          destination: result


workflows:
  version: 2

  build_test_deploy:
    jobs:
      - beforebuild

      - test:
          requires:
            - beforebuild

      - build:
          requires:
            - beforebuild

      - deploy:
          requires:
            - build
            - test
          filters:
            branches:
              only: deploy-demo

      - build_rpm
