def secrets = [
  [path: 'secret/jenkins/maps', engineVersion: 2, secretValues: [
    [envVar: 'MAPS_ACCESS_TOKEN', vaultKey: 'access_token']]],
]

def configuration = [vaultUrl: "${env.VAULT_URL}",  vaultCredentialId: 'vault-app-role', engineVersion: 2]

pipeline {
  agent {
    kubernetes {
      defaultContainer 'jnlp'
      yamlFile 'jenkins/build-pod.yaml'
    }
  }

  options {
    checkoutToSubdirectory('cloudify-stage')
    buildDiscarder(logRotator(numToKeepStr:'30'))
    timeout(time: 120, unit: 'MINUTES')
    timestamps()
  }

  environment {
    BRANCH = "${env.BRANCH_NAME}"
    WORKSPACE = "${env.WORKSPACE}"
    STAGE_DIR = "cloudify-stage"
    CFY_MANAGER_URL = 'https://raw.githubusercontent.com/cloudify-cosmo/cloudify-manager'
    CFY_NODE_RPM = 'http://repository.cloudifysource.org/cloudify/components/nodejs-12.22.1-1nodesource.x86_64.rpm'
    MAIN_BRANCH = "6.1.0-build"
  }

  stages {
    stage('Prepare & Audit main branch'){
      parallel{
        stage('Audit'){
          when {
            branch "${MAIN_BRANCH}"
          }
          steps {
            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE'){
              container('node'){
                dir("${STAGE_DIR}") {
                  echo 'Run npm production dependencies security audit'
                  sh 'npm run audit'
                }
              }
            }
          }
        }
        stage('Prepare & Run first test group'){
          steps {
            container('node'){
              dir("${STAGE_DIR}/conf") {
                withVault([configuration: configuration, vaultSecrets: secrets]) {
                  sh """
                    jq '.maps.accessToken = "${env.MAPS_ACCESS_TOKEN}"' app.json > app.json.tmp && mv app.json.tmp app.json
                  """
                }
                dir("${STAGE_DIR}") {
                  echo "Install dependencies"
                  sh 'npm run beforebuild'
                  echo "Build application"
                  sh 'npm run build'
                }
              }
              echo 'prepare test folder'
              sh "mkdir -p ${WORKSPACE}/test && cp -rf ${WORKSPACE}/${STAGE_DIR}/. ${WORKSPACE}/test"
              dir("${WORKSPACE}/test"){
                echo 'Run static code analysis and code style check'
                sh 'npm run lint'

                echo 'Check TypeScript types'
                sh 'npm run check-types'
              }
            }
          }
        }
        stage('Build RPM'){
          steps {
            container('rpmbuild'){
              echo 'Create RPM directory and copy all data from build stage to, for rpmbuild to run'
              sh """
                cd && mkdir rpmbuild && cd rpmbuild
                mkdir -p BUILD && cp -rf ${WORKSPACE}/${STAGE_DIR}/. BUILD && cd BUILD
                curl -fO "${CFY_MANAGER_URL}/${BRANCH}/packaging/version_info" || curl -fO "${CFY_MANAGER_URL}/${MAIN_BRANCH}/packaging/version_info"
              """

              echo 'Install NodeJS & RPM development tools'
              sh "yum install -y ${CFY_NODE_RPM} rpmdevtools rpmlint"

              echo 'Lint RPM spec file & Install build dependencies for RPM spec file'
              sh '''
                cd ~/rpmbuild/BUILD
                rpmlint --info packaging/cloudify-stage.spec
                for i in {1..10}; do yum-builddep -y packaging/cloudify-stage.spec && break || sleep 5; done
              '''

              echo 'Download sources for RPM spec file & Build RPM'
              sh '''
                cd ~/rpmbuild/BUILD && source ./version_info
                spectool \
                  -d "CLOUDIFY_VERSION $CLOUDIFY_VERSION" \
                  -d "CLOUDIFY_PACKAGE_RELEASE $CLOUDIFY_PACKAGE_RELEASE" \
                  -P packaging/cloudify-stage.spec \
                  -S -g

                rpmbuild \
                  -D "CLOUDIFY_VERSION $CLOUDIFY_VERSION" \
                  -D "CLOUDIFY_PACKAGE_RELEASE $CLOUDIFY_PACKAGE_RELEASE" \
                  -bb packaging/cloudify-stage.spec
              '''

              echo 'Save Artifacts'
              sh("mkdir -p ${WORKSPACE}/rpm && cp -rf /root/rpmbuild/RPMS/x86_64/. ${WORKSPACE}/rpm")
              dir("${WORKSPACE}/rpm") {
                archiveArtifacts artifacts: '*.rpm', onlyIfSuccessful: true
              }
            }
          }
        }
      }
    }
    stage('Run second tests group') {
      parallel {
        stage('Test frontend'){
          steps{
            container('node'){
              dir("${WORKSPACE}/test"){
                echo 'Run frontend tests'
                sh 'npm run test:frontend'
              }
            }
          }
        }
        stage('Test backend'){
          steps{
            container('node'){
              dir("${WORKSPACE}/test"){
                echo 'Run backend tests'
                sh 'sudo rm -rf /var/lib/apt/lists/* && sudo apt update && sudo apt install postgresql-client'
                sh 'echo \'{"app":{"ssl":{"ca":null},"logLevelConf":"","logLevel":"debug"}}\' > conf/me.json'
                sh 'npm run test:backend'
              }
            }
          }
        }
        stage('Size') {
          steps {
            container('node'){
              sh "mkdir -p ${WORKSPACE}/size && cp -rf ${WORKSPACE}/${STAGE_DIR}/. ${WORKSPACE}/size"
              dir("size") {
                echo 'Check bundle size'
                sh 'npm run size'
              }
              sh "rm -rf ${WORKSPACE}/size"
            }
          }
        }
        stage('Docs'){
          steps {
            container('node'){
              sh "mkdir -p ${WORKSPACE}/docs && cp -rf ${WORKSPACE}/${STAGE_DIR}/. ${WORKSPACE}/docs"
              dir("docs") {
                echo 'Generate widgets documentation'
                sh 'npm run docWidgets'

                echo 'Check if widgets documentation is up to date'
                sh 'git diff --exit-code ./widgets'

                echo 'Check if cloudify-ui-components version is the same as in official documentation'
                sh 'npm run docCheck'
              }
            }
          }
        }
        stage('Run Stage-UI System-tests') {
          when {
            branch "${MAIN_BRANCH}"
          }
          steps {
            echo 'Trigger Stage-UI System-tests'
            build(job: 'Stage-UI-System-Test', parameters: [
              string(name: 'BRANCH', value: "${MAIN_BRANCH}"),
              string(name: 'STAGE_BRANCH', value: "${MAIN_BRANCH}")
            ])
          }
        }
      }
    }
  }
}
