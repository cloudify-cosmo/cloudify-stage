def secrets = [
  [path: 'secret/jenkins/maps', engineVersion: 2, secretValues: [
    [envVar: 'MAPS_ACCESS_TOKEN', vaultKey: 'access_token']]],
]

def configuration = [vaultUrl: "${env.VAULT_URL}",  vaultCredentialId: 'vault-app-role', engineVersion: 2]

pipeline {
  agent {
    kubernetes {
      defaultContainer 'jnlp'
      yamlFile 'jenkins/build-pod.yaml'
    }
  }

  options {
    checkoutToSubdirectory('cloudify-stage')
    buildDiscarder(logRotator(numToKeepStr:'30'))
    timeout(time: 120, unit: 'MINUTES')
    timestamps()
  }

  environment {
    BRANCH = "${env.BRANCH_NAME}"
    workspace = "${env.WORKSPACE}"
    stage_dir = "cloudify-stage"
    cfy_manager_url = 'https://raw.githubusercontent.com/cloudify-cosmo/cloudify-manager'
    cfy_node_rpm = 'http://repository.cloudifysource.org/cloudify/components/nodejs-12.16.1-1nodesource.x86_64.rpm'
  }

  stages {
    stage('Prepare'){
      steps {
        container('node'){
          dir("${stage_dir}/conf") {
            withVault([configuration: configuration, vaultSecrets: secrets]) {
              sh """
                jq '.maps.accessToken = "${env.MAPS_ACCESS_TOKEN}"' app.json > app.json.tmp && mv app.json.tmp app.json
              """
            }
          }
        }
      }
    }
    stage('Run Builds') {
      parallel {
        stage('Build') {
          steps {
            container('node'){
              dir("${stage_dir}") {
                echo "Install dependencies"
                sh 'npm run beforebuild'

                echo "Build application"
                sh 'npm run build'
              }
            }
          }
        }
        stage('Build RPM'){
          steps {
            container('rpmbuild'){
              echo 'Create RPM directory and copy all data from build stage to, for rpmbuild to run'
              sh """
                cd && mkdir rpmbuild && cd rpmbuild
                mkdir -p BUILD && cp -rf ${workspace}/${stage_dir}/. BUILD && cd BUILD
                curl -fO "${cfy_manager_url}/${BRANCH}/packaging/version_info" || curl -fO "${cfy_manager_url}/master/packaging/version_info"
              """

              echo 'Install NodeJS & RPM development tools'
              sh "yum install -y ${cfy_node_rpm} rpmdevtools rpmlint"

              echo 'Lint RPM spec file & Install build dependencies for RPM spec file'
              sh '''
                cd ~/rpmbuild/BUILD
                rpmlint --info packaging/cloudify-stage.spec
                for i in {1..10}; do yum-builddep -y packaging/cloudify-stage.spec && break || sleep 5; done
              '''

              echo 'Download sources for RPM spec file & Build RPM'
              sh '''
                cd ~/rpmbuild/BUILD && source ./version_info
                spectool \
                  -d "CLOUDIFY_VERSION $CLOUDIFY_VERSION" \
                  -d "CLOUDIFY_PACKAGE_RELEASE $CLOUDIFY_PACKAGE_RELEASE" \
                  -P packaging/cloudify-stage.spec \
                  -S -g

                rpmbuild \
                  -D "CLOUDIFY_VERSION $CLOUDIFY_VERSION" \
                  -D "CLOUDIFY_PACKAGE_RELEASE $CLOUDIFY_PACKAGE_RELEASE" \
                  -bb packaging/cloudify-stage.spec
              '''

              echo 'Save Artifacts'
              sh("mkdir -p ${workspace}/rpm && cp -rf /root/rpmbuild/RPMS/x86_64/. ${workspace}/rpm")
              dir("${workspace}/rpm") {
                archiveArtifacts artifacts: '*.rpm', onlyIfSuccessful: true
              }
            }
          }
        }
      }
    }
    stage('Test'){
      steps {
        container('node'){
          sh "mkdir -p ${workspace}/test && cp -rf ${workspace}/${stage_dir}/. ${workspace}/test"
          dir("test") {
            echo 'Run static code analysis and code style check'
            sh 'npm run lint'

            echo 'Check TypeScript types'
            sh 'npm run check-types'

            echo 'Run frontend tests'
            sh 'npm run test:frontend'

            echo 'Run backend tests'
            sh 'sudo rm -rf /var/lib/apt/lists/* && sudo apt update && sudo apt install postgresql-client'
            sh 'echo \'{"app":{"ssl":{"ca":null},"logLevelConf":"","logLevel":"debug"}}\' > conf/me.json'
            sh 'npm run test:backend'
          }
        }
      }
    }
    stage('Run Tests') {
      parallel {
        stage('Size') {
          steps {
            container('node'){
              sh 'rm -rf ${workspace}/test && rm -rf ${workspace}/backend'
              sh "mkdir -p ${workspace}/size && cp -rf ${workspace}/${stage_dir}/. ${workspace}/size"
              dir("size") {
                echo 'Check bundle size'
                sh 'npm run size'
              }
              sh "rm -rf ${workspace}/size"
            }
          }
        }
        stage('Docs'){
          steps {
            container('node'){
              sh 'rm -rf ${workspace}/test && rm -rf ${workspace}/backend'
              sh "mkdir -p ${workspace}/docs && cp -rf ${workspace}/${stage_dir}/. ${workspace}/docs"
              dir("docs") {
                echo 'Generate widgets documentation'
                sh 'npm run docWidgets'

                echo 'Check if widgets documentation is up to date'
                sh 'git diff --exit-code ./widgets'

                echo 'Check if cloudify-ui-components version is the same as in official documentation'
                sh 'npm run docCheck'
              }
            }
          }
        }
      }
    }
    stage('Audit'){
      when {
        branch "master"
      }
      steps {
        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE'){
          container('node'){
            dir("${stage_dir}") {
              echo 'Run npm production dependencies security audit'
              sh 'npm run audit'
            }
          }
        }
      }
    }
    stage('Run Stage-UI System-tests') {
      when {
        branch "master"
      }
      steps {
        echo 'Trigger Stage-UI System-tests'
        build(job: 'Stage-UI-System-Test', parameters: [
          string(name: 'BRANCH', value: 'master'),
          string(name: 'STAGE_BRANCH', value: 'master'),
          booleanParam(name: 'CENTOS_MANAGER', value: false),
          booleanParam(name: 'UPDATE_STAGE_ON_MANAGER', value: false)
        ])
      }
    }
  }
}
